using System;
using System.Reflection;

namespace ArrayLesson
{
    class Program
    {
        static void Main(string[] args)
        {

        }
    }
}
/* 1. 배열의 기본 개념과 사용 방법
* ==============================================================
* 우선 배열의 기본 개념과 사용 방법을 알아보겠습니다.
* 하나의 이름에 데이터를 여러 개 담는 것을 컬렉션이라고 부릅니다. (1page)
* C#에서는 다음과 같은 다양한 컬렉션 형식을 제공하고 우리도 추후 다루게 되겠지만, (2page)
* 지금은 컬렉션 중 배열만 다루어 보도록 하겠습니다.
* 
* 컬렉션 중 배열이 있다고 했죠?
* 즉, 배열은 동일한 자료형을 가진 데이터를 여러 개 저장한 데이터 구조를 이야기합니다. (3page)
* 이렇게만 본다면 잘 모르겠다고 생각할 수 있습니다.
* 그럼 우선 변수처럼 배열을 선언해볼까요? (코드창으로 변환)
* 
* 배열의 선언은 간단합니다.
* 배열은 동일한 데이터 형식을 갖는다고 했죠?
* 그러므로 배열이 가질 데이터 형식을 적고 선언해주면 됩니다. 함께 해볼까요?
* 
* (작성)
* 먼저 다음과 같이 배열이 가질 자료형을 적고 
* 배열을 뜻하는 대괄호를 적어줍니다.
* 그리고 변수명처럼 배열의 이름을 적습니다.
* ==============================================================
* int[] array;
* ==============================================================
* 자. 이대로 끝난다면 배열에는 아무것도 들어갈 수 없는 상태입니다.
* 우리는 단순하게 int 자료형을 가지는 배열 array라는 이름을 선언한 것 뿐입니다.
* 
* 실제로 할당을 통해 배열에 변수가 들어갈 공간을 만들어 주겠습니다.
* (작성)
* array 배열에 new를 사용하여 생성을 시작합니다.
* 자료형은 동일하게 적고, 대괄호 안에는 배열의 용량. 
* 즉, 몇개의 변수를 배열에 포함시킬지 적어줍니다.
* ==============================================================
* array = new int[5];
* ==============================================================
* 그러면 배열의 선언과 생성이 끝났습니다.
* 지금은 보여드리기 위해 선언과 생성을 따로 해봤는데요.
* 이것을 하나로 합쳐서 
* ==============================================================
* int[] array = new int [5];
* ==============================================================
* 이렇게 선언과 생성을 작성할 수 있습니다.
* 
* 이러면 array라는 이름의 배열은 5개의 int형식의 변수를 보관하고 있을 겁니다.
* 하지만 우리는 int형식의 변수가 무엇인지는 정하지 않았죠? (4page)
* 이런 경우 배열에는 자동으로 각 타입별 기본값이 들어갑니다.
* 숫자형은 0, bool값은 false 처럼 말이죠.
* 이제 5칸짜리의 배열에 원하는 값을 저장해보겠습니다.
* 
* 저장하는 방식은 크게 2가지가 있습니다.
* 배열을 선언하며 초기화 하는 방식과
* 배열이 가진 인덱스라는 위치값을 활용하여 특정한 위치에 특정한 값을 넣는 방식입니다.
* 하나하나 살펴보겠습니다.
* 
* 우선 배열의 중요한 특징. 인덱스를 활용해보겠습니다.
* 인덱스는 0부터 시작하며, 배열의 몇번째 칸 이라는 위치 정보를 나타내는 정수형 위치값입니다.(5page)
* 즉, 원하는 위치의 인덱스를 사용하여 값을 저장할 수 있죠. (코드창으로 변환)
* ==============================================================
* array[0] = 1;
* ==============================================================
* 이렇게 작성하면 array 배열의 0번째 칸에 1을 저장한다고 명령할 수 있습니다.
* 콘솔에 출력해 볼까요?
* ==============================================================
* Console.WriteLine(array[0]);
* ==============================================================
* 그리고 당연하게도 같은 값을 다음처럼 다른 위치에 저장할 수도 있습니다.
* ==============================================================
* array[1] = 1;
* ==============================================================
* 그럼 만약 인덱스를 배열이 선언한 용량을 넘기는 위치로 불러오게 하면 어떨까요?
* ==============================================================
* array[10] = 2;
* ==============================================================
* 범위가 틀렸다는 에러가 발생합니다.
* 배열 안에 없는 위치이기 때문이죠.
* 여기까지가 배열에 인덱스를 활용한 방법이였습니다.
* 
* 두번째 방법으로는 자료를 미리 넣어서 할당하는 방식입니다.
* (작성)
* 선언과 생성을 작성한 후 중괄호 넣어 원하는 변수를 작성해줍니다. 
* ==============================================================
* int[] array = new int[5] { 1, 2, 3, 4, 5 };
* ==============================================================
* 모두 출력해 볼까요?
* ==============================================================
* Console.WriteLine(array[0]);
* Console.WriteLine(array[1]);
* Console.WriteLine(array[2]);
* ==============================================================
* 올바르게 출력되는 것을 확인할 수 있습니다.
* 
* 지금까지 배열의 기본 개념과 사용 방법을 알아봤습니다.
*/
/* 2. 2차원 배열의 활용
 * 차원이 2이상인 배열을 다차원 배열이라고 합니다.
 * 우리가 지금까지 본 기본 배열은 1차원 배열인데요.
 * 
 * 다차원 배열은 어렵지 않습니다.
 * ==============================================================
 * int[] array;
 * int[,] array2;
 * int[,,] array3;
 * int[,,,] array4;
 * ==============================================================
 * 이런식으로 콤마를 사용하여 차원을 표현하여 배열을 선언할 수 있습니다.
 * 보통 2차원 배열은 가로, 세로, 3차원 배열은 가로, 세로, 높이를 가진 입체 구조를 표현할 수 있습니다. (6 page)
 * 조금 복잡하게 느껴지네요.
 * 
 * 다차원 배열 중 2차원 배열을 이해한다면 다른 다차원 배열도 이해하기 쉬울 겁니다.
 * 이번에는 2차원 배열을 선언하고 활용하는 법을 알아보겠습니다.
 * 
 * (작성)
 * 우선 int 형식의 2차원 배열 example를 선언하고 크기는 5, 5인 2차원 배열로 제작해보겠습니다.
 * 1차원 배열의 선언과 크게 차이는 없고 크기 하나만 더 적어주면 됩니다.
 * ==============================================================
 * int[,] example = new int[5, 5];
 * ==============================================================
 * 그리고 인덱스를 활용해 2차원 배열에 값을 저장해 볼건데요.
 * 2차원 배열은 각 위치별 인덱스 값을 적어주면 됩니다.
 * (작성)
 * 인덱스 값은 [세로, 가로]로 표시하면 됩니다.
 * ==============================================================
 * example[0, 0] = 1;
 * example[0, 3] = 4;
 * example[1, 3] = 3;
 * example[3, 2] = 2;
 * ==============================================================
 * 표를 생각하면 쉽습니다. 
 * 표로 표현하면
 * 처음에는 int형의 기본값이 0이지만, 
 * 위치 인덱스를 찾아 입력한 곳은 0,0/ 0,3/ 1,3/ 3,2의 위치의 값이 변하게 됩니다.(7 page)
 * 가장 헷갈리고 주의해야할 점은 세로 열을 먼저 계산한다는 점입니다.
 * 
 * 그리고 인덱스를 사용하지 않는다면
 * ==============================================================
 * bool[,] array
 *     = new bool[5, 5]
 *     {   { false,false,false,false,false},
 *         { false,false,false,false,false},
 *         { false,false,false,false,false},
 *         { false,false,false,false,false},
 *         { false,false,false,false,false}
 *     };
 * ==============================================================
 * 이렇게 배열에 값을 할당할 수 있습니다.
 * 
 * 게임을 제작하다보면 다양한 방면에서 배열을 활용하게 될겁니다.
 * 2차원 배열만 하더라도 맵을 표현하거나 좌표 관리하는 방식으로 사용할 수 있습니다.
 */
/* 3. 반복문과 함께하는 배열의 활용
 * 앞서 강조했듯이 배열은 인덱스로 관리가 됩니다.
 * 그래서 이를 활용한 for 반복문을 사용할 수 있게 됩니다.
 * 
 * 우리는 앞선 시간 for문을 배웠는데요.
 * 이번에는 1차원 배열에 새로운 foreach문 반복문도 함께 적용해보겠습니다.
 * 
 * 우선 for문은 우리가 시작 지점과 끝을 정해주었죠.
 * ==============================================================
 * for( int i = 5; i > 0; i--){
 *      Console.WriteLine(i);
 *      }
 * ==============================================================
 * 이렇게 말이에요.
 * 그럼 이 카운트다운을 배열을 이용해 for문으로 
 * 배열의 인덱스의 반복을 설정하고 출력하도록 구현해보겠습니다. (8page)
 * (작성)
 * 먼저 countdown 배열을 선언하고 초기화 해줍니다.
 * 그리고 for문을 활용해서 인덱스 0번부터 5개를 출력하도록 작성해줍니다.
 * ==============================================================
 * int[] countdown = { 5, 4, 3, 2, 1 };
 * 
 * for( int index = 0; index < 5; index--){
 *      Console.WriteLine(countdown[index]);
 *      }
 * ==============================================================
 * (실행)
 * 자, index값이 0부터 4까지 전부 출력되는 걸 확인할 수 있습니다.
 * 그런데 만약 배열의 크기를 개발자가 착각했다면 어떻게 될까요?
 * ==============================================================
 * int[] countdown = { 5, 4, 3, 2, 1 };
 * 
 * for( int index = 0; index < 10; index--){
 *      Console.WriteLine(countdown[index]);
 *      }
 * ==============================================================
 * (실행)
 * 이렇게 배열의 범위를 벗어났다는 에러가 뜨게 됩니다.
 * 
 * 우리는 이를 방지하기위해 배열 자체의 길이를 불러와서 사용할수 있습니다.
 * (작성)
 * 배열에 Length를 사용하면, 배열의 길이를 불러올 수 있습니다.
 * 이렇게 작성한다면(실행) index 값이 배열의 범위를 벗어나지 않게되죠.
 * ==============================================================
 * for(int index = 0; index < countdown.Length; index--){
 *      Console.WriteLine(countdown[index]);
 *      }
 * ==============================================================
 * 이번에는 새로 배우는 반복문 foreach문을 사용해 보겠습니다.
 * 
 * foreah문은 컬렉션에 저장된 값을 순서대로 하나씩 변수에 임시로 담은 후 사용하는 형태로
 * 해당 데이터 저장소의 처음부터 끝까지 모든 자료를 순서대로 출력해주는 반복문입니다.
 * 
 * countdown이라는 배열을 foreach로 출력해보겠습니다.
 * 
 * (작성)
 * 다음처럼 int 변수 num을 선언하고 in countdown, 즉 countdown배열에서 값을 가져오겠다고 지정해주면
 * num 변수에 데이터가 임시로 저장되는 것이죠.
 * ==============================================================
 * foreach (int num in countdown)
 * {
 *     Console.WriteLine(num);
 * }
 * ==============================================================
 * (실행)
 * 실행하면 카운트다운이 출력 되는 것을 볼 수 있죠?
 * 
 * 자, 여기서 for문과의 가장 큰 차이가 생깁니다.
 * num으로 빼온 값을 수정해보겠습니다.
 * ==============================================================
 * foreach (int num in countdown)
 * {
 *     num = 7;
 *     Console.WriteLine(num);
 * }
 * ==============================================================
 * foreach문에서는 수정할 수 없다며 에러가 발생하는 것을 확인 할 수 있습니다.
 * 만약 for문으로 실행하면 어떨까요?
 * 
 * (작성)
 * countdown배열의 값을 전부 5로 바꾸고 출력하도록 해보겠습니다.
 * ==============================================================
 * for(int index = 0; index < countdown.Length; index--)
 * {
 *      countdown[index] = 5;
 *      Console.WriteLine(countdown[index]);
 * }
 * ==============================================================
 * 이처럼 for문은 인덱스로 접근하여 인덱스 위치의 값이 변하는 것을 확인할 수 있습니다.
 * 
 * 이런 차이가 발생하는 것은 foreach에 사용된 in 한정자 때문인데요.
 * 이는 추후 배울 매개변수 한정자 중 하나입니다.
 * 우선은 in을 사용한 경우 변수의 읽기만 가능하다는 점을 기억하고 
 * 그 때문에 for문은 수정이 가능하지만 foreach문은 불가능하다는 차이가 생긴다는 점을 알아두면 됩니다.
 * 
 * 자 이제부터는 반복문과 2차원 배열을 이용해 가장 간단하게 지도를 만들어 보겠습니다.
 * 우션 벽과 길을 표시해야하므로 bool로된 2차원 배열로 해보겠습니다.
 * 
 * (작성)
 * 크기는 임의 10, 10의 정사각으로 표시하고 테두리는 전부 벽 false로, 
 * 길은 이어지도록 임의로 true값을 설정해볼께요.
 * ==============================================================
 * bool[,] map = new bool[10, 10]
 * {
 *     { false, false, false, false, false, false, false, false, false, false},
 *     { false,  true,  true,  true,  true,  true,  true, false, false, false},
 *     { false,  true,  true, false,  true, false, false, false, false, false},
 *     { false, false,  true,  true, false, false, false, false, false, false},
 *     { false, false, false,  true, false, false, false, false, false, false},
 *     { false,  true,  true,  true, false,  true,  true, false,  true, false},
 *     { false,  true, false, false,  true, false,  true,  true,  true, false},
 *     { false,  true,  true,  true,  true, false,  true,  true,  true, false},
 *     { false, false,  true, false,  true,  true,  true,  true,  true, false},
 *     { false, false, false, false, false, false, false, false, false, false}
 * };
 * ==============================================================
 * 우리는 이제 값을 가져와서 false이면 X를 true이면 공란을 출력하도록 코드를 입력해 보겠습니다.
 * (작성)
 * for문에 y를 0부터 map 배열의 y축 길이를 가져오도록 범위는 map.GetLength(0)을 설정합니다.
 * 이때, GetLength(0)이 세로 열, 즉 y축의 크기를, GetLength(1)이 가로 행, 즉 x축의 크기를 가져옵니다.
 * 우리는 2차원배열에서 세로를 먼저 입력한다는 것을 기억합시다.
 * (작성)
 * 다시 이어서 작성해볼께요.
 * 우리는 y값과 x, 모두 있어야 온전한 위치를 알 수 있습니다. 따라서 for문을 한번 더 작성할 겁니다.
 * 이번에는 x가 0부터 map.GetLength(1) 까지 반복하는 for문입니다.
 * 
 * 이제 우리는 배열의 모든 값은 인덱스로 순회할 수 있게 만들었습니다.
 * 조건문을 사용해서 false과 true일때의 출력을 정의해볼께요.
 * ==============================================================
 * for(int y = 0; y < map.GetLength(0); y++)
 * {
 *     for(int x = 0; x < map.GetLength(1); x++)
 *     {
 *         if (map[y,x] == false)
 *         {
 *             Console.Write("X");
 *         }
 *         else
 *         {
 *             Console.Write(" ");
 *         }
 *     }
 * ==============================================================
 * 출력하면, 어떤가요?
 * 그래픽은 단순하지만 마치 미로가 생겨난 것 같지 않나요?
 * 이런식으로 배열은 반복문과 활용해서 사용하는 방법이 아주 많답니다.
 * 
 * 배열을 어떤식으로 활용하게 될지 한 번 고민해 보는 시간이 되시길 바랍니다.  
 */
/* 4. 배열과 타입
 * 자료형 중 배열과 깊은 연관이 있는 자료형 string에 대해 조금 더 알아보겠습니다.
 * 문자열 string은 우리가 보기에는 하나의 자료형으로 보이지만 사실 내부에서는 char 변수들의 배열로 이루어져 있습니다.
 * 
 * 만약 string을 한글자씩만 출력하고 싶어진다면, 어떻게 해야할까요?
 * string 배열을 작성해 보겠습니다.
 * ==============================================================
 * string str = "배열 정복";
 * ==============================================================
 * string은 char로 이루어져 있다고 했죠?
 * 그러면 foreach문과 char를 사용해서 하나씩 출력해보겠습니다.
 * ==============================================================
 * foreach(char c in str)
 * {
 *     Console.WriteLine(c);
 * }
 * ==============================================================
 * string은 배열이니까 당연히 인덱스로도 출력할 수 있습니다.
 * for문으로 구현해 보겠습니다.
 * ==============================================================
 * for(int index = 0; index< str.Length; index++)
 * {
 *     Console.WriteLine(str[index]);
 * }
 * ==============================================================
 * 이제 index으로도 str 속 원하는 글자를 불러낼 수 있겠죠?
 * 하지만 string이 아니라 char 변수로 불러와 진다는 사실을 꼭 기억하세요.
 * 
 * 이번에는 또 다른 자료형인 var(variable)에 대해 알아보겠습니다.
 * C#에서는 자료형을 추론해주는 var 키워드가 존재합니다.
 * var을 이용하여 선언한 변수에 저장되는 값을 추론해서 C#이 알맞은 형식으로 변환해주는 기능이죠.
 * 그래서 var 형식은 추론 형식이라고 부릅니다.
 * 예를 들어볼께요.
 * (작성)
 * 아까 작성했던 string 변수를 var을 사용하여 출력해보겠습니다.
 * 이때 foreach에 char str in str이 아니라 var str in str로 작성해보겠습니다.
 * ==============================================================
 * foreach (var c in str)
 * {
 *     Console.WriteLine(c);
 * }
 * ==============================================================
 * 이러면 var str 변수에 str 배열에서 값을 임시로 저장하겠다는 뜻이죠.
 * 실행해 보겠습니다.
 * 제대로 출력되는 걸 확인할 수 있죠?
 * 
 * 이처럼 var은 str 배열에 담긴 자료형이 string이라는 것을 추론해 알맞은 형으로 변수를 제작해 주게 됩니다.
 * 
 * 그럼 var 형을 왜 쓰게 되는 걸까요?
 * 코드가 복잡해질수록 우리는 많은 컬렉션들을 사용하게 됩니다.
 * 그때 만약 개발자가 자료형을 착각하게 된다면, 코드는 그대로 에러를 발생시킬겁니다.(10 page)
 * 이런식으로 복잡해진 코드 속 자료형을 잘못 지정해서 에러가 나는 상황을 피하기위해 var 를 사용할 수 있습니다.
 * 단, var형은 추후 배울 지역 변수, 즉 함수 속에서 선언된 경우만 사용이 가능하다는 제약이 있다는 점 꼭 기억해 둡시다.
 */







